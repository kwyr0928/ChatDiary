// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  password      String    @db.VarChar(255) //hashed
  created_at    DateTime  @default(now())

  Diaries Diaries[]

  MonthlySummaries MonthlySummaries[]

  Analyses Analyses[]

  Tags Tags[]

  Continuation Continuation[]
}

model Diaries {
  id         String      @id @default(cuid())
  userId     String
  title      String      @db.VarChar(255)
  summary    String?     @db.VarChar(255)
  isPublic   Boolean     @default(false)
  created_at DateTime    @default(now())
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Chats      Chats[]
  DiaryTags  DiaryTags[]

  @@index([userId])
}

model Chats {
  id         String   @id @default(cuid())
  diaryId    String
  mode       Int
  message    String   @db.VarChar(255)
  response   String?  @db.VarChar(255)
  created_at DateTime @default(now())
  diary      Diaries  @relation(fields: [diaryId], references: [id], onDelete: Cascade)

  @@index([diaryId])
}

model Tags {
  id         String   @id @default(cuid())
  userId     String
  name       String   @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()

  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  DiaryTags DiaryTags[]
}

model MonthlySummaries {
  id         String   @id @default(cuid())
  userId     String
  month      Int //202411
  text       String   @db.VarChar(255)
  created_at DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Analyses {
  id         String   @id @default(cuid())
  userId     String
  text       String   @db.VarChar(255)
  created_at DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Continuation {
  id     String  @id @default(cuid())
  userId String
  day    Int
  done   Boolean
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DiaryTags {
  id      String  @id @default(cuid())
  tagId   String
  diaryId String
  tag     Tags    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  diary   Diaries @relation(fields: [diaryId], references: [id], onDelete: Cascade)
}

// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime?
//   password      String    @db.VarChar(255) //hashed
//   created_at    DateTime  @default(now())
//   image         String?
//   accounts      Account[]
//   sessions      Session[]

//   Diaries Diaries[]

//   MonthlySummaries MonthlySummaries[]

//   Analyses Analyses[]
// }

// model Account {
//   id                       String  @id @default(cuid())
//   userId                   String
//   type                     String
//   provider                 String
//   providerAccountId        String
//   refresh_token            String? @db.Text
//   access_token             String? @db.Text
//   expires_at               Int?
//   token_type               String?
//   scope                    String?
//   id_token                 String? @db.Text
//   session_state            String?
//   user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
//   refresh_token_expires_in Int?

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }
