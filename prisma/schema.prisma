// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  passward      String    @db.VarChar(255) //hashed
  created_at    DateTime  @default(now())
  image         String?
  accounts      Account[]
  sessions      Session[]

  Diaries Diaries[]

  MonthlySummaries MonthlySummaries[]

  Analyses Analyses[]
}

model Diaries {
  id         String   @id @default(cuid())
  userId     String
  title      String   @db.VarChar(255)
  detail     String   @db.VarChar(255)
  summary    String   @db.VarChar(255)
  isPublic   Boolean
  created_at DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Chats      Chats[]
}

model Chats {
  id         String   @id @default(cuid())
  diaryId    String
  question   String   @db.VarChar(255)
  response   String   @db.VarChar(255)
  created_at DateTime @default(now())
  diary      Diaries  @relation(fields: [diariesId], references: [id], onDelete: Cascade)
  diariesId  String
}

model Tags {
  id         String   @id @default(cuid())
  tag_name   String   @db.VarChar(255)
  created_at DateTime @default(now())

  DiaryTags DiaryTags[]
}

model MonthlySummaries {
  id         String   @id @default(cuid())
  userId     String
  month      Int
  text       String   @db.VarChar(255)
  created_at DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Analyses {
  id         String   @id @default(cuid())
  userId     String
  text       String   @db.VarChar(255)
  created_at DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DiaryTags {
  id     String @id @default(cuid())
  tag_id String
  tag    Tags   @relation(fields: [tag_id], references: [id], onDelete: Cascade)
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
